name: Deploy K3S Workload

on:
  workflow_dispatch:

jobs:
  deploy-to-k3s:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      TF_VAR_aws_account_id:     ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_GithubActionsRole:  ${{ vars.GithubActionsRole }}
      TF_VAR_public_key:         ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_private_key:        ${{ secrets.SSH_PRIVATE_KEY }}
      TF_VAR_vpc_cidr:           ${{ vars.vpc_cidr }}
      TF_VAR_ips_to_bastion:     ${{ vars.IPS_TO_BASTION }}
      TF_VAR_CERT_MANAGER_EMAIL: ${{ secrets.CERT_MANAGER_EMAIL }}
      TF_VAR_domain_name:        ${{ vars.domain_name }}
      TF_VAR_NODE_INSTANCE_PROFILE: ${{ vars.node_instance_profile}}
    defaults:
      run:
        working-directory: Infrastructure

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.TF_VAR_aws_account_id }}:role/${{ env.TF_VAR_GithubActionsRole }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~> 1.12.0

      - name: Get K3s Node IPs and Deploy Route53
        id: get-ips
        run: |
          terraform init
          NODE1_IP=$(terraform output -raw node-1_public_ip)
          #NODE2_IP=$(terraform output -raw node-2_public_ip)
          echo "node1_ip=$NODE1_IP" >> $GITHUB_OUTPUT
          #echo "node2_ip=$NODE2_IP" >> $GITHUB_OUTPUT
          echo "K3s Master IP: $NODE1_IP"
          #echo "K3s Worker IP: $NODE2_IP"
          
          # Deploy Route53 changes
          terraform apply -auto-approve
          
          # Get DNS information
          JENKINS_DNS=$(terraform output -raw jenkins_dns_fqdn)
          echo "jenkins_dns=$JENKINS_DNS" >> $GITHUB_OUTPUT
          echo "Jenkins DNS: $JENKINS_DNS"

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.get-ips.outputs.node1_ip }} >> ~/.ssh/known_hosts
          # ssh-keyscan -H ${{ steps.get-ips.outputs.node2_ip }} >> ~/.ssh/known_hosts

      - name: Wait for K3s to be ready
        run: |
          echo "Waiting for K3s master to be ready..."
          until ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ubuntu@${{ steps.get-ips.outputs.node1_ip }} 'sudo kubectl get nodes' 2>/dev/null; do
            echo "K3s not ready yet, waiting..."
            sleep 30
          done
          echo "K3s master is ready!"

      - name: Get K3s Config
        run: |
          # Get k3s.yaml from AWS Parameter Store
          aws ssm get-parameter \
            --name "/rsschool/k3s-yaml" \
            --with-decryption \
            --query "Parameter.Value" \
            --region us-west-2 \
            --output text > k3s-config.yaml

          # Replace localhost with the actual IP if needed
          if grep -q "127.0.0.1\|localhost" k3s-config.yaml; then
            sed -i "s/127.0.0.1/${{ steps.get-ips.outputs.node1_ip }}/g" k3s-config.yaml
            sed -i "s/localhost/${{ steps.get-ips.outputs.node1_ip }}/g" k3s-config.yaml
          fi
          
          echo "K3s config retrieved from Parameter Store"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install NGINX Ingress Controller
        run: |
          export KUBECONFIG=k3s-config.yaml
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace \
            --set controller.publishService.enabled=true \
            --set controller.hostNetwork=true

      - name: Deploy Jenkins to K3s
        run: |
          export KUBECONFIG=k3s-config.yaml
          
          # Test connection
          kubectl get nodes
          
          # Create namespace if it doesn't exist
          kubectl create namespace jenkins --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply Jenkins prerequisites before Helm installation
          echo "Applying Jenkins prerequisites..."
          kubectl apply -f ../K3S_Manifests/Mod3_Task4/Prerequisites/prerequisites-jenkins-NS.yaml
          kubectl apply -f ../K3S_Manifests/Mod3_Task4/Prerequisites/prerequisites-jenkins-SC.yaml
          kubectl apply -f ../K3S_Manifests/Mod3_Task4/Prerequisites/prerequisites-jenkins-SA.yaml
          
          # Process and apply Jenkins Ingress with dynamic domain
          echo "Processing Jenkins Ingress with domain: ${{ vars.domain_name }}"
          export DOMAIN_NAME=${{ vars.domain_name }}
          envsubst < ../K3S_Manifests/Mod3_Task4/Prerequisites/prerequisites-jenkins-Ingress.yaml | kubectl apply -f -
          
          kubectl create -n jenkins secret generic jenkins-dev1-secret --from-literal=username=dev1 --from-literal=password="$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c16)"
          # kubectl create -f ../K3S_Manifests/Mod3_Task4/Prerequisites/letsencrypt-staging-clusterissuer.yaml
         
          # Verify prerequisites are applied
          echo "Verifying prerequisites..."
          kubectl get storageclass jenkins-pv
          kubectl get serviceaccount jenkins -n jenkins
          kubectl get clusterrole jenkins
          kubectl get clusterrolebinding jenkins
          
          # Deploy Jenkins using Helm
          helm repo add jenkins https://charts.jenkins.io
          helm repo update
          
          # Deploy Jenkins with your custom values
          helm upgrade --install jenkins jenkins/jenkins \
            --namespace jenkins \
            --values ../K3S_Manifests/Mod3_Task4/jenkins-values.yaml \
            --wait \
            --timeout 5m
          
          # Get Jenkins service info
          kubectl get svc -n jenkins
          
          # Get Jenkins admin password
          echo "Jenkins admin password: ( Change it after first login )"
          kubectl exec --namespace jenkins -c jenkins -it statefulset/jenkins -- /bin/cat /run/secrets/additional/chart-admin-password
        
      - name: Deploy Application Manifests
        run: |
          export KUBECONFIG=k3s-config.yaml
          
          # Apply any additional manifests from K3S_Manifests directory
          if [ -d "../../K3S_Manifests" ]; then
            echo "Applying manifests from K3S_Manifests directory..."
            find ../../K3S_Manifests -name "*.yaml" -o -name "*.yml" | while read file; do
              if [[ "$file" != *"jenkins-values.yaml"* ]]; then
                echo "Applying $file"
                kubectl apply -f "$file" || echo "Failed to apply $file, continuing..."
              fi
            done
          fi
          
          # Show deployed resources
          kubectl get all --all-namespaces

      - name: Verify Deployment
        run: |
          export KUBECONFIG=k3s-config.yaml
          
          # Check if all pods are running
          kubectl get pods --all-namespaces
          
          # Check node status
          kubectl get nodes -o wide
          
          # Check services
          kubectl get svc --all-namespaces

      - name: Output Access Information
        run: |
          echo "## K3s Cluster Access Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**K3s Master Node:** ${{ steps.get-ips.outputs.node1_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "**K3s Worker Node:** ${{ steps.get-ips.outputs.node2_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Jenkins Access:**" >> $GITHUB_STEP_SUMMARY
          echo "- URL: http://${{ steps.get-ips.outputs.node1_ip }}:30111" >> $GITHUB_STEP_SUMMARY
          echo "- Domain: http://${{ steps.get-ips.outputs.jenkins_dns }}" >> $GITHUB_STEP_SUMMARY
          echo "- Username: admin" >> $GITHUB_STEP_SUMMARY
          echo "- Password: Check the deployment logs above" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**DNS Information:**" >> $GITHUB_STEP_SUMMARY
          echo "- Jenkins Domain: ${{ steps.get-ips.outputs.jenkins_dns }}" >> $GITHUB_STEP_SUMMARY
          echo "- IP Address: ${{ steps.get-ips.outputs.node1_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          # echo "**SSH Access:**" >> $GITHUB_STEP_SUMMARY
          # echo "```bash" >> $GITHUB_STEP_SUMMARY
          # echo "ssh ubuntu@${{ steps.get-ips.outputs.node1_ip }}" >> $GITHUB_STEP_SUMMARY
          # echo "ssh ubuntu@${{ steps.get-ips.outputs.node2_ip }}" >> $GITHUB_STEP_SUMMARY
          # echo "```" >> $GITHUB_STEP_SUMMARY 
