name: Create AWS infra, K3S
on:
  workflow_dispatch:

jobs:
  terraform-init-fmt-plan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      TF_VAR_aws_account_id:    ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_GithubActionsRole: ${{ vars.GithubActionsRole }}
      TF_VAR_public_key:        ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_private_key:       ${{ secrets.SSH_PRIVATE_KEY }}
      TF_VAR_CERT_MANAGER_EMAIL: ${{ secrets.CERT_MANAGER_EMAIL }}
      TF_VAR_vpc_cidr:          ${{ vars.vpc_cidr }}
      TF_VAR_ips_to_bastion:    ${{ vars.IPS_TO_BASTION }}
      TF_VAR_node_instance_profile: ${{ vars.node_instance_profile }}
    defaults:
      run:
        working-directory: Infrastructure

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4       
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.TF_VAR_aws_account_id }}:role/${{ env.TF_VAR_GithubActionsRole }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~> 1.12.0
      - name: Terraform fmt
        run: terraform fmt 

      - name: Terraform Init-Plan
        run: terraform init && terraform plan


  terraform-init-apply:
    needs: terraform-init-fmt-plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      actions: write
    env:
      TF_VAR_aws_account_id:    ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_GithubActionsRole: ${{ vars.GithubActionsRole }}
      TF_VAR_public_key:        ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_private_key:       ${{ secrets.SSH_PRIVATE_KEY }}
      TF_VAR_CERT_MANAGER_EMAIL: ${{ secrets.CERT_MANAGER_EMAIL }}
      TF_VAR_vpc_cidr:          ${{ vars.vpc_cidr }}
      TF_VAR_ips_to_bastion:    ${{ vars.IPS_TO_BASTION }}
      TF_VAR_node_instance_profile: ${{ vars.node_instance_profile }}

    defaults:
      run:
        working-directory: Infrastructure

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4       
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.TF_VAR_aws_account_id }}:role/${{ env.TF_VAR_GithubActionsRole }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~> 1.12.0

      - name: Terraform Init-Fmt-Apply
        run: terraform init && terraform fmt && terraform apply -auto-approve

      - name: Output Access Information
        id: terraform-apply
        run: |
          NODE1_IP=$(terraform output -raw node-1_public_ip || echo "not available")
          # NODE2_IP=$(terraform output -raw node-2_public_ip || echo "not available")
          echo "## K3s Cluster Node Public IPs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**K3s Master Node:** $NODE1_IP" >> $GITHUB_STEP_SUMMARY
          # echo "**K3s Worker Node:** $NODE2_IP" >> $GITHUB_STEP_SUMMARY
          
          # Store the IP for the next workflow
          echo "node1_ip=$NODE1_IP" >> $GITHUB_OUTPUT

      - name: Trigger K3S Deployment
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'k3s-deploy.yml',
                ref: context.ref,
              });
              console.log('Successfully triggered k3s-deploy.yml workflow');
            } catch (error) {
              console.log('Error triggering k3s-deploy.yml workflow:', error.message);
              console.log('The workflow will be triggered automatically via workflow_run trigger');
            }

      - name: Trigger Route53 Update
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'route53-update.yml',
                ref: context.ref,
                inputs: {
                  jenkins_ip: '${{ steps.terraform-apply.outputs.node1_ip }}'
                }
              });
              console.log('Successfully triggered route53-update.yml workflow');
            } catch (error) {
              console.log('Error triggering route53-update.yml workflow:', error.message);
              console.log('The workflow will be triggered automatically via workflow_run trigger');
            }

      - name: Workflow Trigger Summary
        run: |
          echo "## Workflow Trigger Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Infrastructure deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following workflows should be triggered automatically:" >> $GITHUB_STEP_SUMMARY
          echo "- **k3s-deploy.yml**: Deploy K3S cluster and Jenkins" >> $GITHUB_STEP_SUMMARY
          echo "- **route53-update.yml**: Update DNS records" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "If automatic triggering fails, you can manually run these workflows." >> $GITHUB_STEP_SUMMARY